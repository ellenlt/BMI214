require(class)
require(ROCR)
require(e1071)
require(FSelector)
require(foreign)
require(arules)
require(class)
install.packages("ROCR")
install.packages("e1071")
install.packages("FSelector")
install.packages("foreign")
require(class)
require(ROCR)
require(e1071)
require(FSelector)
require(foreign)
install.packages("arules")
require(arules)
leukemia <-read.table("http://bmi214.stanford.edu/files/a2/leukemia.csv",header=TRUE,sep=",")
summary(leukemia)
leukemia[,c("leukemia_type")]
names(leukemia)
knn.pred <- knn.cv(k=5,
cl=leukemia[,c("leukemia_type")],
train=leukemia[,names(leukemia)!="leukemia_type"],
prob=TRUE)
## Generate the confusion matrix for the classifier:
confusion.table <- table(knn.pred, leukemia[,c("leukemia_type")])
confusion.table
knn.actual <- leukemia[,c("leukemia_type")]
confusion.table <- table(knn.pred, actual)
confusion.table <- table(knn.pred, knn.actual)
confusion.table
knn.prob <- attr(knn.pred,"prob")
knn.prob[knn.pred == "AML"] = 1 - knn.prob[knn.pred == "AML"]
knn.rocr.pred <- prediction(knn.prob,
leukemia[,c("leukemia_type")],
label.ordering=c("AML","ALL"))
knn.perf <- performance(knn.rocr.pred,"tpr","fpr")
plot(knn.perf)
cross.validation <- function(data, response, FUN, num.folds=5) {
fold.size = floor(nrow(data)/num.folds)
## Loop for each fold:
for (i in 1:num.folds) {
## Determine the indexes for test and train partitions:
start.index <- (i-1)*fold.size + 1
if(i == num.folds) end.index <- nrow(data) else end.index <-
start.index +
fold.size - 1
excl.index <- c(start.index:end.index)
test <- data[excl.index,]
train <- data[-excl.index,]
## Test:
if (i==1) {
weights <- FUN(as.formula(paste(response,'~.',sep='')),test)
} else {
weights[,1] <- weights[,1] +
FUN(as.formula(paste(response,'~.',sep='')),test)[,1]
}
}
weights[,1] <- weights[,1]/num.folds
return(weights[order(weights[,1], decreasing=TRUE),,drop=FALSE])
}
## zeroR returns a data frame, where the rows represent:
## TP, TN, FP, FN
classOne<-"1"
classTwo<-"2"
zeroR <- function(formula, data) {
class.summary <- summary(data[,c("leukemia_type")])
classes <- labels(class.summary)
if ( class.summary[as.numeric(classOne)] > class.summary[as.numeric(classTwo)] ) {
other.class <- classes[as.numeric(classTwo)]
predictions <- rep(classes[as.numeric(classOne)],times=nrow(data))
} else {
other.class <- classes[as.numeric(classOne)]
predictions <- rep(classes[as.numeric(classTwo)],times=nrow(data))
}
confusion.table <- table(predictions, data[,c("leukemia_type")])
results <- matrix(nrow=4,data=0)
results[1,] <- confusion.table[c(predictions[as.numeric(classOne)]),c(predictions[as.numeric(classOne)])]
results[3,] <- confusion.table[c(predictions[as.numeric(classOne)]),other.class]
results.frame <- data.frame(results,row.names=c("TP","TN","FP","FN"))
return(results.frame)
}
cross.validation(leukemia,"",zeroR)
View(leukemia)
leukemia[,c("leukemia_type")]
summary(leukemia[,c("leukemia_type")])
labels(summary(leukemia[,c("leukemia_type")]))
labels(summary(leukemia[,c("leukemia_type")]))[1]
cross.validation(leukemia,"",zeroR)
## zeroR returns a data frame, where the rows represent:
## TP, TN, FP, FN
classOne<-"1"  #ALL
classTwo<-"2"  #AML
zeroR <- function(formula, data) {
class.summary <- summary(data[,c("leukemia_type")])
classes <- labels(class.summary)
if ( class.summary[as.numeric(classOne)] > class.summary[as.numeric(classTwo)] ) {
other.class <- classes[as.numeric(classTwo)]
predictions <- rep(classes[as.numeric(classOne)],times=nrow(data))
} else {
other.class <- classes[as.numeric(classOne)]
predictions <- rep(classes[as.numeric(classTwo)],times=nrow(data))
}
confusion.table <<- table(predictions, data[,c("leukemia_type")])
results <- matrix(nrow=4,data=0)
results[1,] <- confusion.table[c(predictions[as.numeric(classOne)]),c(predictions[as.numeric(classOne)])]
results[3,] <- confusion.table[c(predictions[as.numeric(classOne)]),other.class]
results.frame <- data.frame(results,row.names=c("TP","TN","FP","FN"))
return(results.frame)
}
cross.validation(leukemia,"",zeroR)
confusion.table
summary(data[,c("leukemia_type")])
summary(leukemia[,c("leukemia_type")])
cross.validation(leukemia,"",zeroR)
leukemia[,c("leukemia_type")])
nb.fit <- naiveBayes(leukemia[,names(leukemia)!="leukemia_type"],
leukemia[,c("leukemia_type")])
table(predict(nb.fit,leukemia[,names(leukemia)!="leukemia_type"]),
leukemia[,c("leukemia_type")])
leukemia.subset <- leukemia[,c(1:5,ncol(leukemia))]
feature.col.index <- names(leukemia.subset) != "leukemia_type"
leukemia.subset.knn.pred <- knn.cv(k=5,
cl=leukemia.subset[,c("leukemia_type")],
train=leukemia.subset[,feature.col.index])
leukemia.subset.confusion.table <- table(leukemia.subset.knn.pred,
leukemia.subset[,c("leukemia_type")])
leukemia.subset.confusion.table
weights <- information.gain("leukemia_type ~.",leukemia)
weights[with(weights, order(-attr_importance)),]
rownames(weights)[with(weights, order(-attr_importance))]
yeast <-
read.table("http://bmi214.stanford.edu/files/a2/yeast.dat.csv",
header=TRUE,sep=",")
summary(yeast)
yeast.clust <- kmeans(yeast[, - ncol(yeast)], 2)
yeast.clust
sum(yeast.clust$cluster==1)
sum(yeast.clust$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust <- kmeans(yeast[, - ncol(yeast)], 2)
yeast.clust
sum(yeast.clust$cluster==1)
sum(yeast.clust$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.1 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.2 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.5 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.20 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.2 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.2$cluster==1)
sum(yeast.clust.2$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=1)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=5)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=20)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=100)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=1)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=5)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=20)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=100)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.cluster.vs.label <- table(yeast.clust$cluster, yeast[,c("ribosomal")])
yeast.cluster.vs.label
yeast.knn <- knn.cv(k=5,cl=yeast[,c("ribosomal")],train=yeast[,-ncol(yeast)])
yeast.knn.table <- table(yeast.knn,yeast[,c("ribosomal")])
yeast.knn.table
genotenureitis <-read.arff("http://bmi214.stanford.edu/files/a2/genotenureitus1.arff")
View(genotenureitis)
summary(genotenureitis)
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ''irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != 'irep']
genotenureitis <-read.arff("http://bmi214.stanford.edu/files/a2/genotenureitus1.arff")
summary(genotenureitis)
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != 'irep']
summary(genotenureitis)
summary(genotenureitis.filtered)
rules <- apriori(genotenureitis.filtered,
parameter=list(supp=0.5,
conf=0.9,
target="rules",
maxlen=4))
summary(rules)
my.subset <- subset(rules,subset=confidence == 1 & support > 0.8)
summary(my.subset)
inspect(my.subset)
inspect<-inspect(my.subset)
cross.validation(genotenureitis.filtered,'gotgrants',gain.ratio)
cross.validation(genotenureitis.filtered,'gotgrants',chi.squared)
# information gain
cross.validation(genotenureitis.filtered,'gotgrants',information.gain)
# symmetrical uncertainty
cross.validation(genotenureitis.filtered,'gotgrants',symmetrical.uncertainty)
cross.validation(genotenureitis.filtered,'pctdrivel',gain.ratio)
cross.validation(genotenureitis.filtered,'pctdrivel',chi.squared)
cross.validation(genotenureitis.filtered,'pctdrivel',information.gain)
cross.validation(genotenureitis.filtered,'pctdrivel',symmetrical.uncertainty)
setwd("/Users/ellen/BMI214/p4/")
data <- read.csv("~/BMI214/p4/output.csv")
View(data)
data <- read.csv("~/BMI214/p4/output.csv", header=F)
View(data)
all_tanimoto <- read.csv("~/BMI214/p4/output.csv", header=F)
all_tanimoto <- read.csv("~/BMI214/p4/output.csv", header=F)
hist(all_tanimoto$V3,main="Histogram of All Tanimoto Values",xlab="Tanimoto Score")
shared_tanimoto <- all_tanimoto[all_tanimoto$V4==1,]
View(shared_tanimoto)
notshared_tanimoto <- all_tanimoto[all_tanimoto$V4==0,]
length(shared_tanimoto)
nrow(shared_tanimoto)
nrow(shared_tanimoto)+nrow(notshared_tanimoto)
hist(shared_tanimoto$V3,main="Histogram of Tanimoto Values\nfor Ligands that Share a Target",xlab="Tanimoto Score")
hist(notshared_tanimoto$V3,main="Histogram of Tanimoto Values\nfor Ligands that Do Not Share a Target",xlab="Tanimoto Score")
hist(all_tanimoto$V3,main="Histogram of All Tanimoto Values",xlab="Tanimoto Score")
hist(all_tanimoto$V3,main="05708608 All",xlab="Tanimoto Score")
hist(shared_tanimoto$V3,main="05708608 Shared",xlab="Tanimoto Score")
hist(notshared_tanimoto$V3,main="05708608 Not Shared",xlab="Tanimoto Score")
shared_tanimoto <- all_tanimoto[all_tanimoto$V4==1,]
hist(all_tanimoto$V3,main="05708608 All",xlab="Tanimoto Score")
notshared_tanimoto <- all_tanimoto[all_tanimoto$V4==0,]
hist(shared_tanimoto$V3,main="05708608 Shared",xlab="Tanimoto Score")
hist(notshared_tanimoto$V3,main="05708608 Not Shared",xlab="Tanimoto Score")
hist(all_tanimoto$V3,main="05708608 All",xlab="Tanimoto Score")
setwd("/Users/ellen/BMI214/p4/")
all_tanimoto <- read.csv("~/BMI214/p4/output.csv", header=F)
shared_tanimoto <- all_tanimoto[all_tanimoto$V4==1,]
notshared_tanimoto <- all_tanimoto[all_tanimoto$V4==0,]
hist(all_tanimoto$V3,main="05708608 All",xlab="Tanimoto Score")
hist(shared_tanimoto$V3,main="05708608 Shared",xlab="Tanimoto Score")
hist(notshared_tanimoto$V3,main="05708608 Not Shared",xlab="Tanimoto Score")
hist(all_tanimoto$V3,main="05708608 All",xlab="Tanimoto Score")
hist(notshared_tanimoto$V3,main="05708608 Not Shared",xlab="Tanimoto Score")
hist(all_tanimoto$V3,main="05708608 All",xlab="Tanimoto Score")
hist(shared_tanimoto$V3,main="05708608 Shared",xlab="Tanimoto Score")
hist(notshared_tanimoto$V3,main="05708608 Not Shared",xlab="Tanimoto Score")
